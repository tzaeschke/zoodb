URGENT:

TODO NOW: 
- Fix #114:
  - Assure Test_021_::testThatLastCommitPrevails() works
  - Simplify to read RootPage into a single objects (as all other pages in the DB!!!
  - Merge!
  
- For other problems:
  - Fix min/max TX id in FSM, this is broken!!!!
  - Retest with wait(10) after commit() -> Seems to work, test with Peptide!
  - Check for other (wrong) usages of TX-ID
  - Try:
    - Allow only single concurrent reader
    - Flush after every page write! Flush after every write!!!! Just for testing!
    - Double check usage/rollback of retry() in concurrent test write() 
    - close/reopen file after each commit() -> Flush problem??
    - Generally check flush
    -  




SessionManager::commitInfrastructure():290
- Think about handling retained objects!
  -> Can we ignore this for now (no read-consistency check)?
DiskAccessOneFile::revert():603
- revert more stuff?

Failure may be during commit()... do we keep any state except client cache? Channels/Sinks?

TODO: Remove empty TX from SessionManager..

Test:
 - enable/disable field index
 - enable/disable schema auto creation
 - enable disable retain values



More info:
- Fixing the TX id counting improves things.
- Removing the index in 024 seems to almost fix it, except for a very rare exception during READING:

java.lang.NegativeArraySizeException
	at org.zoodb.internal.server.StorageReader.readString(StorageReader.java:130)
	at org.zoodb.internal.server.ObjectReader.readString(ObjectReader.java:97)
	at org.zoodb.internal.DataDeSerializer.deserializeString(DataDeSerializer.java:908)
	at org.zoodb.internal.DataDeSerializer.readClassInfo(DataDeSerializer.java:962)
	at org.zoodb.internal.DataDeSerializer.deserializeObjectSCO(DataDeSerializer.java:578)
	at org.zoodb.internal.DataDeSerializer.deserializeFields2(DataDeSerializer.java:423)
	at org.zoodb.internal.DataDeSerializer.readObjPrivate(DataDeSerializer.java:312)
	at org.zoodb.internal.DataDeSerializer.readObject(DataDeSerializer.java:186)
	at org.zoodb.internal.server.index.ObjectPosIterator.findNext(ObjectPosIterator.java:69)
	at org.zoodb.internal.server.index.ObjectPosIterator.next(ObjectPosIterator.java:62)
	at org.zoodb.internal.server.index.ObjectPosIterator.next(ObjectPosIterator.java:1)
	at org.zoodb.internal.util.MergingIterator.next(MergingIterator.java:86)
	at org.zoodb.internal.util.SynchronizedROIterator.next(SynchronizedROIterator.java:87)
	at org.zoodb.test.jdo.Test_024_MultiSessionConcurrency$Reader.runWorker(Test_024_MultiSessionConcurrency.java:151)
	at org.zoodb.test.jdo.Test_024_MultiSessionConcurrency$Worker.run(Test_024_MultiSessionConcurrency.java:108)
	
	
	
java.lang.AssertionError: id=0 expected:<10000> but was:<95>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:645)
	at org.zoodb.test.jdo.Test_024_MultiSessionConcurrency.testParallelRead(Test_024_MultiSessionConcurrency.java:314)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)

java.lang.RuntimeException: errors: 1
	at org.zoodb.test.jdo.Test_024_MultiSessionConcurrency.tearDown(Test_024_MultiSessionConcurrency.java:80)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)
	Suppressed: java.lang.NegativeArraySizeException
		at org.zoodb.internal.server.StorageReader.readString(StorageReader.java:130)
		at org.zoodb.internal.server.ObjectReader.readString(ObjectReader.java:97)
		at org.zoodb.internal.DataDeSerializer.deserializeString(DataDeSerializer.java:908)
		at org.zoodb.internal.DataDeSerializer.readClassInfo(DataDeSerializer.java:962)
		at org.zoodb.internal.DataDeSerializer.deserializeObjectSCO(DataDeSerializer.java:578)
		at org.zoodb.internal.DataDeSerializer.deserializeFields2(DataDeSerializer.java:423)
		at org.zoodb.internal.DataDeSerializer.readObjPrivate(DataDeSerializer.java:312)
		at org.zoodb.internal.DataDeSerializer.readObject(DataDeSerializer.java:186)
		at org.zoodb.internal.server.index.ObjectPosIterator.findNext(ObjectPosIterator.java:69)
		at org.zoodb.internal.server.index.ObjectPosIterator.next(ObjectPosIterator.java:62)
		at org.zoodb.internal.server.index.ObjectPosIterator.next(ObjectPosIterator.java:1)
		at org.zoodb.internal.util.MergingIterator.next(MergingIterator.java:86)
		at org.zoodb.internal.util.SynchronizedROIterator.next(SynchronizedROIterator.java:87)
		at org.zoodb.test.jdo.Test_024_MultiSessionConcurrency$Reader.runWorker(Test_024_MultiSessionConcurrency.java:151)
		at org.zoodb.test.jdo.Test_024_MultiSessionConcurrency$Worker.run(Test_024_MultiSessionConcurrency.java:108)
	[CIRCULAR REFERENCE:java.lang.NegativeArraySizeException]




CHANGELOG

2020-Jan-05
===========
- T.Zaeschke
    - Issue #115: Extend ZooCheckDb tool to show file format versions, even when not compatible. 
	- Fixed missing cleanup for empty transactions. Tighter control over open iterators in FSM. 

2018-Dec-18
===========
- T.Zaeschke
	- Fixed Issue #109 and #110 : Inconsistency after removing attribute index..
	- Fixed issue #54 : schema auto-creation fails to roll back properly when commit fails.

2018-Sep-17
===========
- T.Zaeschke
	- Fixed Issue #111 and #112 (partially reverting issue #75): 
	  Support for attaching detached objects.

2017-Sep-28
===========
- T.Zaeschke
	- Added plug-in loader, see PluginLoader for usage.

2017-Sep-09
===========
- T.Zaeschke
    - Refactored serverside concurrency, this also resolves issue #105

2017-Jun-25
===========
- T.Zaeschke
	- Query results now return LiSt i.o. Collection.

2017-May-25
===========
- T.Zaeschke
	- Fixed issue #98, problem with autocreation of schema with empty arrays.
	- Fixed issue #99, problem with character values in queries
	- Fixed issue #101, NPE with ZooCompareDB 
	- Added slf4j logging, this solves issue #47
	- API Change!  DBLogger.setLoggerLevel has been removed. Instead, the slf4j logger should be used
	- Fixed issue #77, NPE in case of schema mismatch

2017-Apr-25
===========
- T.Zaeschke
	- Migrated to Java 8
	- Migrated to JDO 3.1

2017-Feb-19
===========
- T.Zaeschke
	- Fixed issue #96 where setOrdering() may throw NPE when the schema didn't exist yet
	- Added statistics collection for query execution
	- Added tests for index usage with ascending/descending 


2017-Feb-19
===========
- T.Zaeschke
	- Fixed issue #92 which allowed using of query iterators, extent iterators and
	  other resources outside of transactions. 

2017-Jan-24
===========
- T.Zaeschke
    - Fixed issue #91 which sometimes allowed executing queries on closed PMs.
    - Some logging of queries and extents
    - Cleaned up Javadoc

2016-Mar-14
===========
- T.Zaeschke
    - Fixed problem with parsing negative numbers in JDOQL 
    - Fixed handling of negative collection positions: get(-1) should return 'false'
    - Fixed query optimizer using DOUBLE.MIN_VALUE instead of NEGATIVE_INFINITY for minimum values
    - Added support for Query.setRange(String) and JDOQL 'RANGE' keyword, including implicit params. 

2016-Mar-11
===========
- T.Zaeschke
    - Improved type detection and error reporting in query parser
    - Fixed numerous javadoc warnings
    - Implemented basic support for Query.setRange(long, long);

2016-Feb-28
===========
- T.Zaeschke
	- Added JDOQL support for enum.ordinal(), enum.toString(), String.trim(), String.length()
	- Added complete uppercase/lowercase distinction for JDOQL keywords
	- Added support for pc-fields with names that are JDOQL keywords 

2016-Feb-19
===========
- T.Zaeschke
	- Added JDOQL support for abs, sqrt, cos, sin, substring, indexOf, toUpLoCase, get, size 

2016-Feb-12
===========
- T.Zaeschke
	- Initial version with non-transactional read. Multi-session access is blocked for now.

2016-Feb-11
===========
- T.Zaeschke
	- Initial support for OSGI detection for PersistenceManagerFactory

2015-Jul-09
===========
- T.Zaeschke
    - Work on Issue #66 (schema evolution): Fixed evolution for classes containing Date.
    - Fixed issue #69 and #70

2015-Apr-27
===========
- T.Zaeschke
	- Added support path queries
	- Added support for indexing path queries and better index usage with String.startsWith and 
	  String.matches() 

2015-Apr-12
===========
- T.Zaeschke
	- Added support object-parameters in queries with xyz.contains(...) 

2015-Feb-24
===========
- T.Zaeschke
	- Added support for multi-threading concurrency single-session. 
	- Fixed issue #57, #58
	- Added DBTrace tool for tracing API calls

2015-Feb-05
===========
- T.Zaeschke
    - New query parser V2 supports boolean functions such as List.isEmpty() and String.matches()
    - CHECK!!!! Has ZooDB become a lot slower?????

2014-Dec-21
===========
- T.Zaeschke
    - added support for detachAllOnCommit
    - Proper support for refresh()
    - CHECK!!!! Has ZooDB become a lot slower?????

2014-Jul-27
===========
- T.Zaeschke
    - Support for Query.setCandidates() and pm.newQuery(..., Collection c, ...)
    - Several fixes (Issues #41, #42, #43, #44)

2014-Jul-19
===========
- T.Zaeschke
    - Integrated multi-session capability. This is currently quite basic (big lock on DB).

2014-May-15
===========
- T.Zaeschke
	- Major clean-up of transaction handling, failed transactions are now properly rolled back,
	  including better Exception, proper state of rolled back objects, schema object invalidation
	  and closing of transaction or session (for certain exceptions).

2014-May-05
===========
- T.Zaeschke
	- Removed COW from internal DB indexes. Previous version is available with tag  
	  COW-Index  --- 0e631fa 

2014-Mar-05
===========
- T.Zaeschke
	- Refactored schema API
	- Basic version of non-JDO API: ZooSession
	- Use SoftReferences in client cache (configurable)

2014-Feb-23
===========
- T.Zaeschke
	- Proper testing and implementation of schema auto-creation

2013-Jun-09
===========
- T.Zaeschke
	- Schema writing
	- New STATS: PAGE_CNT  

2013-Mai
===========
- T.Zaeschke
	- XML reader/writer
	- ZooCompareDb tools
	- New disk page header with page type, page format version and tx id  

2013-Jan/Feb
===========
- T.Zaeschke
	- Implemented schema versioning
	- Implemented schema declaration without Java classes
	- Implemented automatic schema evolution
	- Implemented reading of non-Java instances
	- Implemented writing of non-Java instances
	- Index evolution  

2013-Jan-xx
===========
- T.Zaeschke
	- Implemented JDO callback and synchronisation API  

2012-Oct-29
===========
- T.Zaeschke: 
    - Improved statistics collection.
    - Improved commit() performance (separate caching for dirty/deleted).

2012-Jun-24
===========
- T.Zaeschke: 
    - Fixed queries with OR and multiple indices. All according test work now.

2012-Jun-23
===========
- T.Zaeschke: 
	- Finally implemented negation in queries. Still buggy though, see tests.

2012-Jun-22
===========
- T.Zaeschke: 
	- Fixed DBHasMap issues

2012-Jun-20
===========
- T.Zaeschke: 
	- Fixed Extents going over transaction boundaries

2012-Jun-16
===========
- T.Zaeschke: 
	- Fixed a number of issues with index updates, e.g. unique index collisions (Test_091)
	- Implemented node-revert() for failed commits (eg index collision)

2012-Jun-08
===========
- T.Zaeschke: 
	- Schemas are now stored as normal objects. This fixes also all known page-leaks in the database
	  for example when adding and removing schemas.
	- Implemented serialization of enums.
	- Fixed db-admin test

2012-Jun-05
===========
- T.Zaeschke: 
	- Started separating ZooDB from JDO, introduced ZooPCImpl

2012-May-23
===========
- T.Zaeschke: 
	- Fixed weird ConcurrentModificationException in deserializer properly
	- Started pooling of de-serializers.
 

2012-Apr-26
===========
- T.Zaeschke: Fixed weird ConcurrentModificationException in deserializer

2012-Apr-??
===========
- T.Zaeschke: Migrated to git repo
